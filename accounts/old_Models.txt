# Create your Model Manager here
class CustomOfficerManager(BaseUserManager):
    """Manager for Officers"""

    def create_user(self, email, password=None, role=None, **extra_fields):
        """Create, save and return a new officer."""
        if not email:
            raise ValueError('Officer must have an email address.')
        email = self.normalize_email(email)
        
        if not role:
            raise ValueError('A role must be specified for the officer.')
        
        # Ensure the provided role is a Role (model) instance or valid role ID
        if not isinstance(role, Role):
            try:
                role = Role.objects.get(pk=role)
            except Role.DoesNotExist:
                raise ValueError('Role does not exist.')

        user = self.model(email=email, role=role, **extra_fields)
        user.set_password(password)
        user.save(using=self.db)

        return user
        
    def create_superuser(self, email, password=None, role=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)

        if not role:
            # Assign a default SuperUser/Administrator role
            try:
                role = Role.objects.get(role_name = "Administrator")
            except Role.DoesNotExist:
                role = Role.objects.create(role_name = "Administrator")

        # Ensure the provided role is a Role (model) instance or valid role ID
        if not isinstance(role, Role):
            try:
                role = Role.objects.get(pk=role)
            except Role.DoesNotExist:
                raise ValueError('Role does not exist')

        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        user = self.create_user(email, password, role, **extra_fields)
        return user

# Create your Models here.
class Role(models.Model):
    """Roles for Officers"""
    role_name = models.CharField(max_length=30)
    
    def __str__(self):
        return self.role_name

class Officer(AbstractBaseUser, PermissionsMixin):
    """Officers/Staffs in the System"""
    firstname = models.CharField(max_length=30)
    lastname = models.CharField(max_length=30)
    middlename = models.CharField(max_length=30, null=True)
    gender = models.ForeignKey(Gender, on_delete=models.CASCADE, default=3)
    contactnumber = models.CharField(max_length=13) # +639xxxxxxxxx
    house_address = models.CharField(max_length=50)
    barangay = models.CharField(max_length=30)
    district = models.PositiveSmallIntegerField(null=True)
    
    email = models.EmailField(unique=True)
    username = models.CharField(max_length=30, unique=True)
    password = models.CharField(max_length=100)

    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    role = models.ForeignKey(Role, on_delete=models.CASCADE)
    date_joined = models.DateField(auto_now_add=True)

    objects = CustomOfficerManager()

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['firstname', 'lastname', 'email']

    groups = models.ManyToManyField(
        Group,
        verbose_name=('groups'),
        blank=True,
        related_name='officers'  # Custom related_name for Officer groups
    )
    user_permissions = models.ManyToManyField(
        Permission,
        verbose_name=('user permissions'),
        blank=True,
        related_name='officers_user_permissions'  # Custom related_name for Officer user_permissions
    )

    def generated_formatted_id(self):
        """Formatting username to be used for logging in"""          # Example returned output: O-2022-00001
        role_abbreviation = self.role.role_name[:1].upper()          # Takes the first letter of the value in role_name
        year_joined = str(self.date_joined.year)                     # Extract the year value from DateField
        user_id = str(self.id).zfill(5)                              # Assuming user ID is padded to 5 digits with leading zeros

        formatted_id = f"{role_abbreviation}-{year_joined}-{user_id}"  # Formatting string to be used
        
        return formatted_id
    
    def save(self, *args, **kwargs):
        if not self.username:
            # Generate the formatted ID when the user is first created
            self.username = self.generated_formatted_id()
        
        super().save(*args, **kwargs)

    def __str__(self):
        return self.username

class Scholar(AbstractBaseUser, PermissionsMixin):
    """Existing Scholars in the System"""
    username = models.CharField(max_length=30, unique=True)
    password = models.CharField(max_length=100)
    
    scholarship_type = models.ForeignKey(ScholarshipType, on_delete=models.CASCADE, null=False)
    is_active = models.BooleanField(default=True)
    role = models.ForeignKey(Role, on_delete=models.CASCADE, default=4)
    date_joined = models.DateField(auto_now_add=True)

    applicant = models.ForeignKey(Applicant, on_delete=models.CASCADE)

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['firstname', 'lastname', 'email']

    groups = models.ManyToManyField(
        Group,
        verbose_name=('groups'),
        blank=True,
        related_name='scholars'  # Custom related_name for Scholar groups
    )
    user_permissions = models.ManyToManyField(
        Permission,
        verbose_name=('user permissions'),
        blank=True,
        related_name='scholars_user_permissions'  # Custom related_name for Scholar user_permissions
    )

    def generated_formatted_id(self):
        """Formatting username to be used for logging in"""          # Example returned output: S-2022-00001
        role_abbreviation = self.role.role_name[:1].upper()     # Takes the first letter of the value in role_name
        year_joined = str(self.date_joined.year)                # Extract the year value from DateField
        user_id = str(self.id).zfill(5)                         # Assuming user ID is padded to 5 digits with leading zeros

        formatted_id = f"{role_abbreviation}-{year_joined}-{user_id}"  # Formatting string to be used
        
        return formatted_id
    
    def save(self, *args, **kwargs):
        if not self.username:
            # Generate the formatted ID when the user is first created
            self.username = self.generated_formatted_id()
        
        super().save(*args, **kwargs)

    def __str__(self):
        return self.username